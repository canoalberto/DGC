package net.sf.jclec.problem.util.dataset.attribute;

import java.util.ArrayList;
import java.util.List;
import java.util.Hashtable;

import net.sf.jclec.util.intset.Closure;
import net.sf.jclec.util.intset.Interval;

/**
 * Categorical attribute
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public class CategoricalAttribute extends AbstractAttribute
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 1L;

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Properties 
	/////////////////////////////////////////////////////////////////
	
	/** Categories list (external values) */
	
	protected List<String> categories = new ArrayList<String>();
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables 
	/////////////////////////////////////////////////////////////////
	
	/** Association between categories and double (internal) values */

	protected transient Hashtable<String, Double> categoryToValue = 
		new Hashtable<String, Double>();
	
	/** Association between internal (double) values and categories */
	
	protected transient Hashtable<Double, String> valueToCategory =
		new Hashtable<Double, String>();
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Constructor
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public CategoricalAttribute(){
		super();
	}
	
	/**
	 * Constructor that sets attribute name
	 * 
	 * @param name Attribute name
	 */
	
	public CategoricalAttribute(String name) 
	{
		super(name);
	}
	
	/**
	 * Constructor that sets attribute name and list of defined categories
	 * 
	 * @param name Attribute name
	 * @param categories List of categories
	 */
	
	public CategoricalAttribute(String name, List<String> categories) 
	{
		super(name);
		setCategories(categories);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Set the list of allowed categories. 
	 * 
	 * This list should not contain repeated elements.
	 * 
	 * @param categories List of categories. 
	 * 
	 * @throws IllegalArgumentException If list contains duplicated 
	 * 									categories
	 */
		
	public void setCategories(List<String> categories)
	{
		// Set the list of categories
		this.categories = categories;
		// Initialize hash tables
		categoryToValue.clear();
		valueToCategory.clear();
		double aux = 0.0;
		for (String category : categories) {
			if (! categoryToValue.containsKey(category)) {
				categoryToValue.put(category, aux);
				valueToCategory.put(aux, category);
				aux += 1.0;
			}
			else {
				throw new IllegalArgumentException("List of categories contain duplicated values");
			}
		}
	}	
	
	/**
	 * Get the interval of categories. 
	 *  
	 * @return the interval
	 */
	
	public Interval intervalValues() 
	{
		return new Interval(0, this.categories.size()-1, Closure.ClosedClosed);
	}
	
	/**
	 * Get the categories.
	 *  
	 * @return the categories.
	 */
	
	public List<String> getCategories() 
	{
		return this.categories;
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------ Overwriting AbstractAttribute methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public AttributeType getType() 
	{
		return AttributeType.Categorical;
	}

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public double parse(String string) 
	{
		// If this string is valid...
		if( categoryToValue.containsKey(string))
			 return ((Double) categoryToValue.get(string)).doubleValue();
		return -1.0d;
	}

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public String show(double ivalue) 
	{
		// If internal value exists...
		if( valueToCategory.containsKey(new Double(ivalue)))
			 return (String) valueToCategory.get(new Double(ivalue));
		// Else return null
		return null;
	}
}