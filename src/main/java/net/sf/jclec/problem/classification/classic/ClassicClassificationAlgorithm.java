package net.sf.jclec.problem.classification.classic;

import net.sf.jclec.problem.classification.ClassificationAlgorithm;
import net.sf.jclec.problem.util.dataset.AbstractDataset;
import net.sf.jclec.problem.util.dataset.IDataset;

import org.apache.commons.configuration.Configuration;

/**
 * Classic Classification Algorithm
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public abstract class ClassicClassificationAlgorithm extends ClassificationAlgorithm 
{
	// ///////////////////////////////////////////////////////////////
	// ---------------------------------------- Serialization constant
	// ///////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -8711970425735016406L;

	// ///////////////////////////////////////////////////////////////
	// -------------------------------------------------- Constructors
	// ///////////////////////////////////////////////////////////////

	/**
	 * Empty (default) constructor
	 */

	public ClassicClassificationAlgorithm() {
		super();
	}

	/////////////////////////////////////////////////////////////////
	//--------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Set the dataset settings
	 * 
	 * @param settings Configuration settings
	 */
	@SuppressWarnings("unchecked")
	protected void setDatasetSettings(Configuration settings)
	{
		try {
			//Train and test set classname
			String datasetClassname = settings.getString("dataset[@type]");
			Class<? extends IDataset> datasetClass;
			datasetClass = (Class<? extends IDataset>) Class.forName(datasetClassname);
			
			// Train set
			setTrainSet(datasetClass.newInstance());
			Configuration datasetSettings = settings.subset("dataset.train-data");
			((AbstractDataset) getTrainSet()).configure(datasetSettings);
			getTrainSet().setMetadata(new ClassicClassificationMetadata());
			getTrainSet().loadExamples();
	
			// Test set
			setTestSet(datasetClass.newInstance());
			datasetSettings = settings.subset("dataset.test-data");
			((AbstractDataset) getTestSet()).configure(datasetSettings);
			getTestSet().setMetadata(new ClassicClassificationMetadata());
			getTestSet().loadExamples();
			
			// Gets the attribute class
			String attributeClass = settings.getString("dataset.attribute-class-name");			
			
			if(attributeClass != null)
			{			
				int attributeClassIndex = getTrainSet().getMetadata().getAttributeIndex(attributeClass);
				((ClassicClassificationMetadata) getTrainSet().getMetadata()).setClassIndex(attributeClassIndex);
				((ClassicClassificationMetadata) getTestSet().getMetadata()).setClassIndex(attributeClassIndex);
			}
			else if(((ClassicClassificationMetadata) getTrainSet().getMetadata()).getClassIndex() == -1)
			{
				// Set the last attribute as the class attribute by default
				((ClassicClassificationMetadata) getTrainSet().getMetadata()).setClassIndex(getTrainSet().getMetadata().numberOfAttributes());
				((ClassicClassificationMetadata) getTestSet().getMetadata()).setClassIndex(getTestSet().getMetadata().numberOfAttributes());
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
}