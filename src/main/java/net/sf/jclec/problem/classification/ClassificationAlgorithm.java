package net.sf.jclec.problem.classification;

import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.problem.util.dataset.IDataset;
import net.sf.jclec.selector.BettersSelector;
import net.sf.jclec.util.random.IRandGen;

import org.apache.commons.configuration.Configuration;

/**
 * Abtract classification algorithm
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public abstract class ClassificationAlgorithm extends PopulationAlgorithm 
{
	// ///////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	// ///////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -8711970425735016406L;

	// ///////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	// ///////////////////////////////////////////////////////////////

	/** Classifier */

	protected IClassifier classifier;

	/** Train Dataset */
	
	private IDataset trainSet;
	
	/** Test Dataset */
	
	private IDataset testSet;
	
	/** Iteration */

	protected int execution = 0;
	
	/** Random number generator */

	protected IRandGen randgen;
	
	/** Selector by fitness */

	protected BettersSelector bettersSelector = new BettersSelector(this);
	
	// ///////////////////////////////////////////////////////////////
	// -------------------------------------------------- Constructors
	// ///////////////////////////////////////////////////////////////

	/**
	 * Empty (default) constructor
	 */

	public ClassificationAlgorithm() {
		super();
	}

	// ///////////////////////////////////////////////////////////////
	// ------------------------------------------------ Public methods
	// ///////////////////////////////////////////////////////////////
	
	/**
	 * Access to execution count
	 * 
	 * @return The execution count
	 */

	public int getExecution() {
		return execution;
	}
	
	/**
	 * Get the classifier
	 * 
	 * @return the classifier
	 */

	public IClassifier getClassifier() {
		return classifier;
	}
	
	/**
	 * Set the classifier
	 * 
	 * @param classifier the classifier
	 */

	public void setClassifier(IClassifier classifier) {
		this.classifier = classifier;
	}

	/**
	 * Access to the train dataset
	 * 
	 * @return train dataset
	 */
	
	public IDataset getTrainSet() 
	{
		return trainSet;
	}

	/**
	 * Set the dataset for train the algorithm
	 * 
	 * @param dataset the data set
	 */
	
	public void setTrainSet(IDataset dataset) 
	{
		this.trainSet = dataset;
	}
	
	/**
	 * Access to the test dataset
	 * 
	 * @return test dataset
	 */
	
	public IDataset getTestSet() 
	{
		return testSet;
	}

	/**
	 * Set the dataset for test the algorithm
	 * 
	 * @param dataset test dataset
	 */
	
	public void setTestSet(IDataset dataset) 
	{
		this.testSet = dataset;
	}
	
	/**
	 * Initialize the randgen
	 */
	
	public void initRandGen()
	{
		this.randgen = super.createRandGen();
	}
	
	// ///////////////////////////////////////////////////////////////
	// ----------------------------- Implementing IConfigure interface
	// ///////////////////////////////////////////////////////////////

	/**
	 * Configuration method
	 * 
	 * @param settings Configuration settings
	 */

	public void configure(Configuration settings)
	{		
		// Call super.configure(settings) method
		super.configure(settings);
		
		// Configure Dataset settings
		setDatasetSettings(settings);
		
		// Initialize random generator
		initRandGen();
	}
	
	/////////////////////////////////////////////////////////////////
	//--------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Set the dataset settings
	 * This method is abstract to provide different dataset types
	 * 
	 * @param settings Configuration settings
	 */
	protected abstract void setDatasetSettings(Configuration settings);
}